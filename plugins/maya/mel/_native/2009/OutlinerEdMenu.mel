// Copyright (C) 1997-2006 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// Alias Script File
// MODIFY THIS AT YOUR OWN RISK
//
// Creation Date:  20 Aug 1996
//
//
//  Procedure Name:
//		OutlinerEdMenu
//
//  Description:
//		Creates a popup menu for the outliner, that
//		allows for control of outliner display
//
//  Input Arguments:
//      Parent outliner.
//
//  Return Value:
//      None.
//

//
//  Procedure Name:
//      setOutlinerLongName
//
//  Description:
//		Sets the Outliner long/short name flag
//
//  Input Arguments:
//      state - 0 = short, 1 = nice, 2 = long
//
//  Return Value:
//      None.
//
global proc setOutlinerLongName (int $state, string $outlineEd)
{
	//	Query the current "name" state of the outliner.
	//
	int $longNames = `outlinerEditor -query -longNames $outlineEd`;
	int $niceNames = `outlinerEditor -query -niceNames $outlineEd`;

	//	Check for a change.
	//
	if ($niceNames && $state == 1) return;
	if (!$niceNames && $longNames && $state == 2) return;
	if (!$niceNames && !$longNames && $state == 0) return;

	if( $state == 2 ) {
		outlinerEditor -e -ln true -nn false $outlineEd;
	} else if( $state == 1 ) {
		outlinerEditor -e -ln true -nn true $outlineEd;
	} else {
		outlinerEditor -e -ln false -nn false $outlineEd;
	}
}

global proc OutlinerEdMenuCommand (string $outlineEd)
{
	//
	// This is the post command for the Outliner Editor popup menu
	
	setParent -m ($outlineEd+"Popup");
	menuItem -edit
		-checkBox `outlinerEditor -query -showDagOnly $outlineEd`
		dagItem;
	menuItem -edit
		-checkBox `outlinerEditor -query -showShapes $outlineEd`
		shapeItem;
	menuItem -edit
		-checkBox `outlinerEditor -query -showAttributes $outlineEd`
		attributeItem;
	menuItem -edit
		-checkBox `outlinerEditor -query -showSetMembers $outlineEd`
		setMembersItem;
	menuItem -edit
		-checkBox `outlinerEditor -query -showConnected $outlineEd`
		connectedItem;
	menuItem -edit
		-checkBox `outlinerEditor -query -showNamespace $outlineEd`
		showNamespaceItem;
	menuItem -edit
		-checkBox `outlinerEditor -query -showMuteInfo $outlineEd`
		showMuteItem;
    menuItem -edit
		-checkBox `outlinerEditor -query -organizeByLayer $outlineEd`
		organizeLayerItem;		
    menuItem -edit
		-checkBox `outlinerEditor -query -autoExpandLayers $outlineEd`
		autoExpandLayersItem;				

	int $outlinerLongName = 1;
	if (!`outlinerEditor -query -niceNames $outlineEd`) {
		$outlinerLongName = (`outlinerEditor -query -longNames $outlineEd` ? 2 : 0);
	}
		menuItem -edit
			-radioButton ( 1 == $outlinerLongName )
			niceNameItem;
		menuItem -edit
			-radioButton ( 2 == $outlinerLongName )
			longNameItem;
		menuItem -edit
			-radioButton ( 0 == $outlinerLongName )
			shortNameItem;

	string $sortOrder = `outlinerEditor -query -sortOrder $outlineEd`;
		menuItem -edit
			-radioButton ($sortOrder == "none")
			noneSortOrderItem;
		menuItem -edit
			-radioButton ($sortOrder == "dagName")
			dagNameSortOrderItem;

	string $attrAlphaOrder = `outlinerEditor -query -attrAlphaOrder $outlineEd`;
		menuItem -edit
			-radioButton ($attrAlphaOrder == "default")
			defaultAttrAlphaSortOrderItem;
		menuItem -edit
			-radioButton ($attrAlphaOrder == "ascend")
			ascendAttrAlphaSortOrderItem;
		menuItem -edit
			-radioButton ($attrAlphaOrder == "descend")
			descendAttrAlphaSortOrderItem;
}

// Expose the popup menu name so it can be customized
global string $gOutlinerPopupMenu;

global proc OutlinerEdMenu (string $outlineEd)
{
	global string $gOutlinerPopupMenu;

	// These are visible to clients, do not change their names
	string $menuName = $outlineEd + "Popup";
	$gOutlinerPopupMenu = $menuName;

	popupMenu
		-ctrlModifier false
		-button 3
		-postMenuCommand ("OutlinerEdMenuCommand " + $outlineEd)
		-parent $outlineEd $menuName;

	menuItem -label (uiRes("m_OutlinerEdMenu.kShowDAGObjectsOnly")) 
		-checkBox true
		-command ("outlinerEditor -edit -showDagOnly #1 " + $outlineEd)
		dagItem;
	menuItem -label (uiRes("m_OutlinerEdMenu.kShowShapes")) 
		-checkBox false
		-command ("outlinerEditor -edit -showShapes #1 " + $outlineEd)
		shapeItem;
	menuItem -label (uiRes("m_OutlinerEdMenu.kShowAttributes")) 
		-checkBox false
		-command ("outlinerEditor -edit -showAttributes #1 " + $outlineEd)
		attributeItem;
	menuItem -label (uiRes("m_OutlinerEdMenu.kShowSetMembers")) 
		-checkBox false
		-command ("outlinerEditor -edit -showSetMembers #1 " + $outlineEd)
		setMembersItem;
	menuItem -label (uiRes("m_OutlinerEdMenu.kShowConnected")) 
		-checkBox false
		-command ("outlinerEditor -edit -showConnected #1 " + $outlineEd)
		connectedItem;
	menuItem -label (uiRes("m_OutlinerEdMenu.kShowNamespaces")) 
		-checkBox true
		-command ("outlinerEditor -edit -showNamespace #1 " + $outlineEd)
		showNamespaceItem;
	menuItem -label (uiRes("m_OutlinerEdMenu.kShowMuteInformation")) 
		-checkBox true
		-command ("outlinerEditor -edit -showMuteInfo #1 " + $outlineEd)
		showMuteItem;
    menuItem -label (uiRes("m_OutlinerEdMenu.kOrganizeByLayer")) 
		-checkBox true
		-command ("outlinerEditor -edit -organizeByLayer #1 " + $outlineEd)
		organizeLayerItem;		
    menuItem -label (uiRes("m_OutlinerEdMenu.kAutoExpandLayers")) 
		-checkBox true
		-command ("outlinerEditor -edit -autoExpandLayers #1 " + $outlineEd)
		autoExpandLayersItem;				
	menuItem -divider true;
	menuItem -label (uiRes("m_OutlinerEdMenu.kRevealSelected"))  
		-command ("outlinerEditor -edit -showSelected  1 " + $outlineEd)
		showSelectedItem;

	int $outlinerLongName = 1;
	if (!`outlinerEditor -query -niceNames $outlineEd`) {
		$outlinerLongName = (`outlinerEditor -query -longNames $outlineEd` ? 2 : 0);
	}
	menuItem -label (uiRes("m_OutlinerEdMenu.kChannelNames")) -subMenu true;
		radioMenuItemCollection;
		menuItem -label (uiRes("m_OutlinerEdMenu.kNice"))
			-radioButton ( 1 == $outlinerLongName )
			-command ("setOutlinerLongName 1 " + $outlineEd)
			niceNameItem;
		menuItem -label (uiRes("m_OutlinerEdMenu.kLong"))
			-radioButton ( 2 == $outlinerLongName )
			-command ("setOutlinerLongName 2 " + $outlineEd)
			longNameItem;
		menuItem -label (uiRes("m_OutlinerEdMenu.kShort"))
			-radioButton ( 0 == $outlinerLongName )
			-command ("setOutlinerLongName 0 " + $outlineEd)
			shortNameItem;
		setParent -m ..;

	string $sortOrder = `outlinerEditor -query -sortOrder $outlineEd`;
	menuItem -label (uiRes("m_OutlinerEdMenu.kSortOrder"))-subMenu true;
		radioMenuItemCollection;
		menuItem -label (uiRes("m_OutlinerEdMenu.kSceneHierarchy"))
			-radioButton ($sortOrder == "none")
			-command ("outlinerEditor -edit -sortOrder none " + $outlineEd)
			noneSortOrderItem;
		menuItem -label (uiRes("m_OutlinerEdMenu.kAlphabeticalWithinType"))
			-radioButton ($sortOrder == "dagName")
			-command ("outlinerEditor -edit -sortOrder dagName " + $outlineEd)
			dagNameSortOrderItem;
		setParent -m ..;

	menuItem -divider true;

	string $attrAlphaOrder = `outlinerEditor -query -attrAlphaOrder $outlineEd`;
	menuItem -label (uiRes("m_OutlinerEdMenu.kAttrAlphaOrder"))-subMenu true;
		radioMenuItemCollection;
		menuItem -label (uiRes("m_OutlinerEdMenu.kAttrAlphaDefault"))
			-radioButton ($attrAlphaOrder == "default")
			-command ("outlinerEditor -edit -attrAlphaOrder \"default\" " + $outlineEd)
			defaultAttrAlphaSortOrderItem;
		menuItem -label (uiRes("m_OutlinerEdMenu.kAttrAlphabeticalAscend"))
			-radioButton ($attrAlphaOrder == "ascend")
			-command ("outlinerEditor -edit -attrAlphaOrder ascend " + $outlineEd)
			ascendAttrAlphaSortOrderItem;
		menuItem -label (uiRes("m_OutlinerEdMenu.kAttrAlphabeticalDescend"))
			-radioButton ($attrAlphaOrder == "descend")
			-command ("outlinerEditor -edit -attrAlphaOrder descend " + $outlineEd)
			descendAttrAlphaSortOrderItem;
		setParent -m ..;

	menuItem -divider true;
	menuItem -label (uiRes("m_OutlinerEdMenu.kSelectSetMembers"))
		-command ("selectAllSetMembers " + $outlineEd)
		selectAllSetMembersItem;

	menuItem -label (uiRes("m_OutlinerEdMenu.kSelectContainerContents"))
		-annotation (getRunTimeCommandAnnotation("SelectContainerContents"))
		-command SelectContainerContents
		selectContainerContentsItem;

    menuItem -divider true;
    string $animLayerFilterOptions = `outlinerEditor -query -animLayerFilterOptions $outlineEd`;    
    int $showAnimLayerWeight = `outlinerEditor -query -showAnimLayerWeight $outlineEd`;    
	menuItem -label (uiRes("m_OutlinerEdMenu.kAnimLayerFilterOptions"))-subMenu true;
		radioMenuItemCollection;
		menuItem -label (uiRes("m_OutlinerEdMenu.kAnimLayerFilterFromLayerEditor"))
			-radioButton ($animLayerFilterOptions == "animLayerEditor")
			-command ("outlinerEditor -edit -animLayerFilterOptions \"animLayerEditor\" " + $outlineEd)
			animLayerFilterAnimLayerEditorItem;
		menuItem -label (uiRes("m_OutlinerEdMenu.kAnimLayerFilterAllAffecting"))
			-radioButton ($animLayerFilterOptions == "allAffecting")
			-command ("outlinerEditor -edit -animLayerFilterOptions allAffecting " + $outlineEd)
			animLayerFilterAllAffectingItem;
		menuItem -label (uiRes("m_OutlinerEdMenu.kAnimLayerFilterActive"))
			-radioButton ($animLayerFilterOptions == "active")
			-command ("outlinerEditor -edit -animLayerFilterOptions active " + $outlineEd)
			animLayerFilterAllActiveItem;
        menuItem -label (uiRes("m_OutlinerEdMenu.kAnimLayerFilterSelected"))
			-radioButton ($animLayerFilterOptions == "selected")
			-command ("outlinerEditor -edit -animLayerFilterOptions selected " + $outlineEd)
			animLayerFilterSelectedItem;								
        
        menuItem -label (uiRes("m_OutlinerEdMenu.kAnimLayerFilterActiveAndSelected"))
			-radioButton ($animLayerFilterOptions == "activeAndSelected")
			-command ("outlinerEditor -edit -animLayerFilterOptions activeAndSelected " + $outlineEd)
			animLayerFilterActiveAndSelectedItem;											
		
		menuItem -divider true;
		menuItem -label (uiRes("m_OutlinerEdMenu.kShowAnimLayerWeight")) 
		    -checkBox ($showAnimLayerWeight == 1)
		    -command ("outlinerEditor -edit -showAnimLayerWeight #1 " + $outlineEd)
		    showAnimLayerWeightItem;		
		
		setParent -m ..;
		
	menuItem -divider true;
//BEGIN CGRU ########################################################################################################
   menuItem -divider true;
   menuItem -l "set active characters" -c ("{string $s[]=`ls -sl -type \"character\"`;setCurrentCharacters($s);}");
   menuItem -divider true;
   menuItem -l "add selection to set" -c ("tima_OutlinerEdMenu_ASTS_globalProc " + $outlineEd);
   menuItem -l "remove selecton from set" -c ("tima_OutlinerEdMenu_RSFS_globalProc " + $outlineEd);
   menuItem -divider true;
//END CGRU ########################################################################################################

	//
        //  Invoke any user supplied code. This callback is published and
        //  needs to remain consistent in future versions of Maya.
        //
        if (exists ("outlinerEdMenuUserCallback") )
        {
                // Use catchQuiet in case no callback is supplied, we don't want that to
                // show an error
                catchQuiet( eval("source \"outlinerEdMenuUserCallback\"") );

        }
}
//BEGIN CGRU ########################################################################################################
global proc tima_OutlinerEdMenu_ASTS_globalProc(string $outliner)
{
   string $outlinerSelection = `outlinerEditor -query -selectionConnection $outliner`;
   string $selectedObjects[] = `ls -sl`;
   int $selSize = `size($selectedObjects)` -1;
   string $set = $selectedObjects[$selSize];
   if(`nodeType $selectedObjects[$selSize]` != "objectSet")
   {
      warning(" ### select set at last to add objects to !!!");
      return;
   }
   int $i;
   for( $i = 0; $i < $selSize; $i++)
      sets -add $set $selectedObjects[$i];
}
global proc tima_OutlinerEdMenu_RSFS_globalProc(string $outliner)
{
   string $outlinerSelection = `outlinerEditor -query -selectionConnection $outliner`;
   string $selectedObjects[] = `ls -sl`;
   int $selSize = `size($selectedObjects)` -1;
   string $set = $selectedObjects[$selSize];
   if(`nodeType $selectedObjects[$selSize]` != "objectSet")
   {
      warning(" ### select set at last to add objects to !!!");
      return;
   }
   int $i;
   for( $i = 0; $i < $selSize; $i++)
      sets -rm $set $selectedObjects[$i];
}
//END CGRU ########################################################################################################

global proc selectAllSetMembers (string $outliner)
//
//  Procedure Name:
//      selectAllSetMembers
//
//  Description:
//      For each set that is selected (gray) in the given Outliner editor,
//	the members of that set are added to the selection list.
//	The sets themselves are not added to the selection list, and will
//	be deselected.
//
//  Input Arguments:
//      The Outliner to get the list of selected sets from.
//
//  Return Value:
//      None.
//


{
	//  Get the selection connection that the given Outliner is using,
	//  and get a list of all it's members.
	//
	string $outlinerSelection = `outlinerEditor -query -selectionConnection $outliner`;
	string $selectedObjects[] = `selectionConnection -query -object $outlinerSelection`;

	string $currentObject;

	for($currentObject in $selectedObjects) { 

		//  If the selected object is a set (a node of type objectSet),
		//  then make sure it is deselected and then select its contents instead.
		//
		if(`nodeType $currentObject` == "objectSet" || `nodeType -api $currentObject` == "kPluginObjectSet") {
			select -noExpand -deselect $currentObject;
			select -add $currentObject;
		}
	}
}

